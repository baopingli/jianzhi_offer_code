/*
*题意：HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
今天测试组开完会后,他又发话了:在古老的一维模式识别中,
常常需要计算连续子向量的最大和,当向量全为正数的时候,
问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,
并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},
连续子向量的最大和为8(从第0个开始,到第3个为止)。
给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？
(子向量的长度至少是1)
*/

/**
思路：一般求最大的话，考虑使用dp，dp表示数组范围为0-i的时候
连续子向量的最大和为多少。要注意负数，所以状态方程需要判断
*/

#include<iostream>
using namespace std;

class Solution {
public:
    int FindGreatestSumOfSubArray(vector<int> array) {
    //返回连续子向量的最大和
        int n=array.size();

        if(n<=0)
            return 0;
        vector<int> dp(n);
        dp[0]=array[0];
        int res=dp[0];
        for(int i=1;i<n;i++)
        {
            if(dp[i-1]<=0)
                dp[i]=array[i];
            else
                dp[i]=dp[i-1]+array[i];
            res=max(res,dp[i]);
        }
        return res;
    }
};

int  main()
{

    cout<<"hello"<<endl;
    return 0;
}
